#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";
var app = require('../app');
var debug = require('debug')('serverpi-v1:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

console.log('Server running on 8080');
const Gpio = require('orange-pi-gpio');
//подключаем socket.io
const io = require('socket.io').listen(server);
//Инициализируем ПИны
let gpio1 = new Gpio({pin:1});
let gpio2 = new Gpio({pin:2});
let gpio3 = new Gpio({pin:3});
let gpio4 = new Gpio({pin:4});
let gpio5 = new Gpio({pin:5});

gpio1.write(1);
gpio2.write(1);
gpio3.write(1);
gpio4.write(1);
gpio5.write(1);

//let StateGpio1=12;
//StateGpio1 = 11;
//StateGpio2 = 12;
//StateGpio3 = 13;
//StateGpio4 = 14;


//информируем о подключениях
io.on('connection', function (socket) {
  console.log('We have new connection!');
});
//посылаем данные всем клиентам
function send_test_data() {
    var test_message;
    gpio5.read()
        .then((state)=>{
              console.log(state);//state of pin 5
              if (state == 0) {
                  test_message = "off";
                  console.log(test_message);
                              }
              else {
                  test_message = "on";
                  console.log(test_message);
                    }
              io.emit ('test_data', {message: test_message});
            });
                      };


//if (gpio5.read() == 0) {
//test_message = "off";
//  }
//  else {
   //test_message = "on";
//  }
//  io.emit ('test_data', {message: test_message});
//}

//gpio5.read()
  //  .then((state)=>{
    //    console.log(state); //state of pin 5
  //  });






//устанавливаем интервал отправки
setInterval (send_test_data, 10000);

//освобождаем gpio
//function unexportOnClose() {
//  gpio5.unexport();
//};

//вызывается при выходе пользователем
//process.on('SIGINT', unexportOnClose);
